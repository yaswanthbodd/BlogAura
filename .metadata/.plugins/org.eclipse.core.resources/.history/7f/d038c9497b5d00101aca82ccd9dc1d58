package com.blogaura.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.blogaura.entity.User;
import com.blogaura.repository.UserRepository;
import com.blogaura.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@RestController
@CrossOrigin(origins = "http://localhost:5173")
public class UserController {
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private UserService userService;
	
	
	
	@PostMapping("/register")
	public ResponseEntity<?> register(@RequestPart("registrationData") String userJson, 
			@RequestPart("imageFile") MultipartFile imageFile) {
		try {
			ObjectMapper objectMapper = new ObjectMapper();
			User user = objectMapper.readValue(userJson, User.class);
			User user1 = userService.register(user, imageFile);
			return new ResponseEntity<>(user1, HttpStatus.CREATED);
		}catch(Exception e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
	}
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody User user,HttpServletResponse response) {
		String jwt =  userService.verify(user);
		if(jwt.equals("Failure")) {
			return new ResponseEntity<>("Invalid Credentials",HttpStatus.UNAUTHORIZED);
		}
		
		//Set Jwt in HTTP-only Cookie
		Cookie cookie = new Cookie("jwt",jwt);
		cookie.setHttpOnly(true);
		cookie.setSecure(true);
		cookie.setPath("/");
		cookie.setMaxAge(60); // 10 Minutes
		
		response.addCookie(cookie);
		return ResponseEntity.ok("Login Successfull");
	}
	
	//Validate the token it will expire or not
	@GetMapping("/validate")
	public ResponseEntity<?> validateToken(Authentication authentication) {
	    if (authentication != null && authentication.isAuthenticated()) {
	        return ResponseEntity.ok().body("Authenticated");
	    } else {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not Authenticated");
	    }
	}
	
//	@PostMapping("/login")
//	public String login(@RequestBody User user) {
//		return userService.verify(user);
//	}
	
	@GetMapping("/hello")
	public String hello() {
		return "Hello ";
	}
	
	//Get All User Details
	@GetMapping("/users")
	public ResponseEntity<List<User>> getAllUsers(){
		return new ResponseEntity<>(userService.getAllUsers(),HttpStatus.OK);
	}

}
